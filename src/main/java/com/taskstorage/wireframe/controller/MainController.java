package com.taskstorage.wireframe.controller;

import com.taskstorage.wireframe.domain.Task;
import com.taskstorage.wireframe.domain.User;
import com.taskstorage.wireframe.repository.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

@Controller
public class MainController {
    @Autowired
    private TaskRepository taskRepository; // This means to get the bean called taskRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    @Value("${upload.path}")
    private String uploadPath;

    @GetMapping("/")
    public String greeting(Model model) {
        return "welcome";
    }

    @GetMapping("/tasks")
    public String list(@RequestParam(required = false, defaultValue = "") String searchTag, Model model) {

        Iterable<Task> tasks;

        if (searchTag != null && !searchTag.isEmpty()) {
            tasks = taskRepository.findByDescriptionContainingOrContentContaining(searchTag, searchTag);
        } else {
            tasks = taskRepository.findAll();
        }

        model.addAttribute("tasks", tasks);
        model.addAttribute("searchTag", searchTag);
        return "main";
    }

    @PostMapping("/addTask")
    public String add(@AuthenticationPrincipal User user,
                      @Valid Task task,
                      BindingResult bindingResult,
//                      @RequestParam String description,
//                      @RequestParam String content,
                      Model model,
                      @RequestParam("file") MultipartFile file) throws IOException {

//        Task task = new Task(description, content, user);
        task.setAuthor(user);

        if (bindingResult.hasErrors()) {
            //Смотри ControllerUtils
            Map<String, String> errorsMap = ControllerUtils.getErrors(bindingResult);
            //Добавляем ошибки в модель
            model.mergeAttributes(errorsMap);
            //Заполняем поля в форме добавления чтоб не вводить заново
            model.addAttribute("task", task);
        } else {
            if (file != null && !file.getOriginalFilename().isEmpty()) {
                File uploadDir = new File(uploadPath);

                if (!uploadDir.exists()) {
                    uploadDir.mkdir();
                }
                String uuidFile = UUID.randomUUID().toString();
                String resultFilename = uuidFile + "." + file.getOriginalFilename();
                //Сохранение файла
                file.transferTo(new File(uploadPath + "/" + resultFilename));
                task.setFilename(resultFilename);
            }

            taskRepository.save(task);
        }


        //Если ошибок валидации нет - редиректим чтоб сообщение не дублировалось при перезагрузке
        if (!bindingResult.hasErrors()) {
            return "redirect:/tasks";
        }
        else
        {
            //Если ошибки есть - остаёмся на странице с сохранением полей и выводом ошибки
            // Вытягиваем все объекты из репозитория и кладём в модель
            Iterable<Task> tasks = taskRepository.findAll();
            model.addAttribute("tasks", tasks);
            //Возвращаем модель
            return "main";
        }

    }

    @PostMapping("/delTask/{id}")
    public String delete(@PathVariable Long id, Model model) {

        taskRepository.deleteById(id);

        return "redirect:/tasks";
    }

//    @PostMapping("/search")
//    public String search(@RequestParam String searchTag, Model model) {
//
//        Iterable<Task> tasks;
//
//        if (searchTag != null && !searchTag.isEmpty()) {
//            tasks = taskRepository.findByDescriptionContainingOrContentContaining(searchTag, searchTag);
//        } else {
//            tasks = taskRepository.findAll();
//        }
//
//        model.addAttribute("tasks", tasks);
//        return "main";
//    }
}
